from tortoise import fields
from .base import BaseModel, TimestampMixin
from app.models.admin import User # Assuming User model is in app.models.admin

class RootCACertificate(BaseModel, TimestampMixin):
    name = fields.CharField(max_length=100, unique=True, description="CA Name/Identifier")
    certificate_pem = fields.TextField(description="PEM-encoded CA certificate chain")
    # For the CA that will be *used by this system to sign* new certificates,
    # its private key is essential. Store it encrypted.
    # This field can be null if the CA is just for trust/reference and not for signing.
    encrypted_private_key = fields.TextField(null=True, description="Encrypted PEM-encoded private key of the CA (if used for signing)")
    private_key_salt = fields.CharField(max_length=32, null=True, description="Salt for private key encryption/decryption") # If deriving key from a passphrase
    uploaded_by = fields.ForeignKeyField("models.User", related_name="uploaded_root_cas", null=True, on_delete=fields.SET_NULL)
    is_issuer = fields.BooleanField(default=False, description="Is this CA configured as an active issuer by the system?")

    class Meta:
        table = "root_ca_certificate"

class CertificateRequest(BaseModel, TimestampMixin):
    STATUS_CHOICES = ["pending", "approved", "rejected", "cancelled"]
    
    common_name = fields.CharField(max_length=255, description="Requested Common Name")
    sans = fields.JSONField(null=True, description="Subject Alternative Names as JSON") # Store as JSON
    status = fields.CharField(max_length=20, default="pending", description="Request status (e.g., pending, approved)")
    rejection_reason = fields.TextField(null=True, description="Reason for rejection")
    requested_by = fields.ForeignKeyField("models.User", related_name="certificate_requests", on_delete=fields.CASCADE)
    approved_by = fields.ForeignKeyField("models.User", related_name="approved_certificate_requests", null=True, on_delete=fields.SET_NULL)
    processed_at = fields.DatetimeField(null=True, description="Timestamp when the request was approved/rejected")

    class Meta:
        table = "certificate_request"

class IssuedCertificate(BaseModel, TimestampMixin):
    STATUS_CHOICES = ["valid", "revoked", "expired"]

    serial_number = fields.CharField(max_length=64, unique=True, description="Certificate Serial Number (hex)")
    subject_dn = fields.CharField(max_length=512, description="Certificate Subject DN")
    issuer_dn = fields.CharField(max_length=512, description="Certificate Issuer DN")
    valid_from = fields.DatetimeField(description="Certificate validity start date")
    valid_to = fields.DatetimeField(description="Certificate validity end date")
    certificate_pem = fields.TextField(description="PEM-encoded certificate (includes chain)")
    # Store user's private key if generated by this system. Encrypt it.
    encrypted_private_key = fields.TextField(null=True, description="Encrypted PEM-encoded private key for the certificate")
    private_key_salt = fields.CharField(max_length=32, null=True, description="Salt for private key encryption/decryption")

    status = fields.CharField(max_length=20, default="valid", description="Certificate status (e.g., valid, revoked)")
    revocation_reason = fields.TextField(null=True, description="Reason for revocation")
    revoked_at = fields.DatetimeField(null=True, description="Timestamp of revocation")
    
    request = fields.OneToOneField("models.CertificateRequest", related_name="issued_certificate", on_delete=fields.CASCADE)
    issued_by_ca = fields.ForeignKeyField("models.RootCACertificate", related_name="issued_certificates", on_delete=fields.RESTRICT) # Don't delete CA if it has issued certs
    # Storing who performed actions can be useful for audit
    issued_by_user = fields.ForeignKeyField("models.User", related_name="issued_certificates_actions", null=True, on_delete=fields.SET_NULL) # Admin who approved/issued
    revoked_by_user = fields.ForeignKeyField("models.User", related_name="revoked_certificates_actions", null=True, on_delete=fields.SET_NULL) # Admin who revoked

    class Meta:
        table = "issued_certificate"
